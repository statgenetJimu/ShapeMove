# タスクのリスト
※ (hoge)はオプショナル
※　作業に入ったら、それとわかるように項目に関して書き込んで下さい。作業が終わったら、それとわかるようにして、結果ファイル(等)へのリンクをつけてください。
0 事前作業環境設定、他(必須)
0.1 github
0.1.1 github.comにて自分のアカウントを作る。そのうえで、ここhttps://github.com/statgenetJimu/StapeMoveのソース改変などができるようにCollabolatorとなる(githubアカウント名を山田に教えて、Collaborator登録してもらう）
0.1.2 gitコマンドが打てるようになる(最低限コマンド → http://d.hatena.ne.jp/ryamada/20150918)
0.2 C++
0.2.1 自分のPCで動くようにする
0.3 python
0.3.1 自分のPCで動くようにする
(0.4) R
(0.4.1) 自分のPCで動くようにする

1 MITK (C++)
1.1 Workbenchをエンドユーザとして使えるようにする(岩崎さん実施中)　→　使用手順をファイルとして作成する（MITK Segmentation.pdf）
1.1.1 特に、Threshold 法による領域選択(segmentation)を実行できるようにする
1.2 MITKベースの開発
1.2.1 MITKソースコード(githubへのリンク https://github.com/MITK/MITK )から実行可能環境を立ち上げる → 実施手順をファイルとして作成する(LinuxでMITKをソースコードから立ち上げる方法.txt）
-> Ubuntuでのコンパイル実施メモ:http://d.hatena.ne.jp/ryamada22/20150925
1.2.2 MITKWorkbenchのTheshold法によるsegmentationを実行しているソースを見つけてそれを解釈する
(1.2.3) Threshold法によるsegmentationを実行する別のモジュールを自前作成して作りこむ

2 画像ファイルの取り扱い (python,c++)
2.1 nd2ファイル形式(NIKON)
2.1.1 nd2ファイル形式のファイルをpythonのnd2readerモジュールで読み込み、n次元アレイから適当なプロットを作成する
2.2 DICOMファイル形式(MITK)
2.1.2 DICOMファイル形式のファイルをpythonのpydicomモジュールを使って読み込み、n次元アレイから適当なプロットを作成する
	調査中ですがpydicomは圧縮された画像が読み込めないようです。(http://stackoverflow.com/questions/24021749/unable-to-get-dicom-image-for-display-in-python)
	[OsiriXのサンプルファイル](http://www.osirix-viewer.com/datasets/)のファイルはNotImplementedErrorで開けず
	c++でgdcmかdcmtkが一般的に使われているようなので簡単な方がどちらか見てみます。→ 圧縮画像はひとまず対象外にしてもらってよいです。圧縮しないでデータ提供してもらうようにしますから(yamada)。
2.1.3 pythonのアレイからDICOMファイルを作る → [http://stackoverflow.com/questions/14350675/create-pydicom-file-from-numpy-array]

3 アレイの扱い(python,c++)
3.1 値が{0,1}のみのアレイデータの扱い(python)
3.1.1 値が{0,1}のみの任意次元・任意サイズのアレイであり、値が1の連続領域がただ１つだけあるようなアレイ(OneObjectArray)を作成する関数を作る(python)
3.1.2 OneObjectArrayの「容積(２次元なら面積、３次元なら体積、４次元ならｘ積)」を返す関数を作る
3.1.3 OneObjectArrayの「周囲(２次元なら周長、３次元なら周囲面積、４次元なら周囲体積」を返す関数を作る
(3.2) c++にて3.1の内容を実施する
(3.3) pythonが持つアレイをc++に引き渡して、c++でのアレイ操作結果をpythonに戻すラッパーを書く → [http://qiita.com/termoshtt/items/81eeb0467d9087958f7f ]

4 高速化・多言語翻訳・拡張
4.1 R関数の多言語翻訳
4.1.1 ~/R/Analysis2D_R.txt にはいくつかのR処理がある。それらを
4.1.1.1 3次元版に拡張する
4.1.1.2 pythonのアレイでの処理に改変する
4.1.1.3 C++での処理に改変する

5 プロトタイプとしてのテスト用４Dデータを作る→岩崎さんに依頼(20150929)
5.1 3次元のオリエンテーションがつくオブジェクトを指定する関数を作る（3Dobject.txt）
5.2 3次元オブジェクトの運動を規定する関数を作る
5.3 それらを使って4Dvoxelデータを作る
5.4 4Dvoxelデータから、各種データファイルフォーマットのテキストファイルを作る

6 C++のモジュール作成→吉村さんに依頼(20150929)
6.1 とにかく簡単なモジュールを一つ作る→C++は自由度が高いので制約を入れるために参考にするルールは→ http://www.textdrop.net/google-styleguide-ja/cppguide.xml
6.1.1 関数ファイルとヘッダファイルとを別ディレクトリに切る
6.1.2 クラスを定義する
6.1.3 stdを使う
6.1.4 iteratorを使う(少し参考：http://d.hatena.ne.jp/ryamada/20150928)

7 離散外微分DECアプリケーション dgpdec (https://github.com/dgpdec/course)
7.1 dgpdecをLinuxにインストールして動くようにする
7.2 dgpdecの中でWillmore Flowによる、「球と位相が同じ３次元空間に置かれた２次元多様体～細胞のようなもの)」の三角メッシュ化されたものから、『ほぼ球』へと変形する処理を実行できるようにする
7.2.1 Rでそれっぽい三角メッシュデータは以下のようにして作れる
library(devtools)
install_github("ryamada22/Ronlyryamada")
example(my.catmull.clark.tri)
# これに関する説明は　http://d.hatena.ne.jp/ryamada/20150922
